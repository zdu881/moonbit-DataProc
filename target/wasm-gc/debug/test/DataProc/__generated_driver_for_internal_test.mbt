// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

typealias Moonbit_Test_Driver_Internal_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (() -> Unit!Error, @moonbitlang/core/builtin.Array[String]),
  ],
]

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = {
  "dispersion.mbt": {
  },
  "basics.mbt": {
  },
  "correlation.mbt": {
  },
}


pub fn moonbit_test_driver_internal_execute(filename: MoonbitTestDriverInternalExternString, index: Int) -> Unit {
  let file_filter = moonbit_test_driver_internal_get_file_name(filename)
  let index_filter = index
  let filtered_test = match moonbit_test_driver_internal_no_args_tests.get(file_filter) {
    Some(index_func_map) => {
      index_func_map.get(index_filter)
    }
    _ => None
  }
  let mut test_name = ""
  let mut message = ""
  match filtered_test {
    Some(item) => {
      let (func, attrs) = (item.0, item.1)
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        index_filter.to_string()
      } else {
        name
      }
      test_name = name
      try {
        func!()
      } catch {
        Failure(e) | InspectError(e) | SnapshotError(e) => {
          message = e
        }
        e => {
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }
    }
    _ => { message = "internal error: failed to filter test with (\{file_filter}, \{index_filter})" }
  }

  let file_name = file_filter.escape()
  let test_name = test_name.escape()
  let message = message.escape()
  @moonbitlang/core/builtin.println("----- BEGIN MOON TEST RESULT -----")
  @moonbitlang/core/builtin.println(
    "{\"package\": \"zdu881/DataProc/DataProc\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  @moonbitlang/core/builtin.println("----- END MOON TEST RESULT -----")
}

pub fn moonbit_test_driver_finish() -> Unit {
  
}

fn main {
  ()
}


fn moonbit_test_driver_internal_get_file_name(file_name : MoonbitTestDriverInternalExternString) -> String {
  moonbit_test_driver_internal_string_from_extern(file_name)
}

type MoonbitTestDriverInternalStringReadHandle

type MoonbitTestDriverInternalExternString

fn moonbit_test_driver_internal_begin_read_string(s : MoonbitTestDriverInternalExternString) -> MoonbitTestDriverInternalStringReadHandle = "__moonbit_fs_unstable" "begin_read_string"

fn moonbit_test_driver_internal_string_read_char(handle : MoonbitTestDriverInternalStringReadHandle) -> Int = "__moonbit_fs_unstable" "string_read_char"

fn moonbit_test_driver_internal_finish_read_string(handle : MoonbitTestDriverInternalStringReadHandle) = "__moonbit_fs_unstable" "finish_read_string"

fn fixedarray_to_bytes(arr : FixedArray[Byte]) -> Bytes = "%identity"

fn moonbit_test_driver_internal_string_from_extern(e : MoonbitTestDriverInternalExternString) -> String {
  let buf = FixedArray::make(512, Byte::default())
  let mut len = 0
  let handle = moonbit_test_driver_internal_begin_read_string(e)
  while true {
    let ch = moonbit_test_driver_internal_string_read_char(handle)
    if ch == -1 {
      break
    } else {
      let written_bytes_len = buf.set_utf16le_char(len, Char::from_int(ch))
      len += written_bytes_len
    }
  }
  moonbit_test_driver_internal_finish_read_string(handle)
  fixedarray_to_bytes(buf).to_unchecked_string(offset = 0, length = len).to_string()
}
